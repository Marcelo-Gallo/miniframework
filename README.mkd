# üöß Work in Progress üöß

Este reposit√≥rio ainda est√° em desenvolvimento! üéâ Por favor, esteja ciente de que funcionalidades est√£o sendo adicionadas e melhoradas constantemente. ‚öôÔ∏èüíª Sinta-se √† vontade para explorar, mas note que algumas partes podem n√£o estar completamente finalizadas. üìà‚ú®


# Padr√£o MVC
O padr√£o MVC (Model-View-Controller) √© uma arquitetura utilizada para organizar aplica√ß√µes de forma modular e escal√°vel. Ele √© dividido em tr√™s componentes principais:
- **Models**: Respons√°veis pela l√≥gica de dados e regras de neg√≥cio.
- **Views**: Encapsulam a apresenta√ß√£o e a interface do usu√°rio.
- **Controllers**: Intermediam a intera√ß√£o entre Models e Views, controlando o fluxo da aplica√ß√£o.

## PHP
Para utilizar o PHP de forma eficiente, √© necess√°rio configur√°-lo no PATH das vari√°veis de ambiente do usu√°rio. Isso permite que os comandos do PHP sejam acess√≠veis globalmente no sistema.
No CMD o servidor √© iniciado com:
```shell
php -S localhost:'porta'
```
Entre as portas, pode ser 8080, 8888... A depender da sua demanda.

Para finalizar o servidor, no CMD, tecle "ctrl + C".

## Composer
O Composer √© um gerenciador de depend√™ncias para PHP que facilita a inclus√£o de pacotes externos na estrutura do projeto. Ele oferece um sistema de autoload (PSR-4) que simplifica o carregamento de scripts, eliminando a necessidade de m√∫ltiplos `require`.

### Principais vantagens:
- Simplifica√ß√£o na inclus√£o de pacotes externos.
- Autoload autom√°tico das classes atrav√©s do namespace gerado pelo Composer.

### Como baixar o Composer:

1. Acesse [getcomposer.org](https://getcomposer.org) e clique em **Download**.
2. Escolha entre o instalador execut√°vel ou a instala√ß√£o via linha de comando e siga os passos indicados.
3. Para instala√ß√£o via linha de comando no diret√≥rio raiz do projeto, siga os comandos abaixo:

#### Copiar o instalador do Composer:
```shell
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
```

#### Verificar a integridade do instalador:
```shell
php -r "if (hash_file('sha384', 'composer-setup.php') === 'dac665fdc30fdd8ec78b38b9800061b4150413ff2e3b6f88543c636f7cd84f6db9189d43a81e5503cda447da73c7e5b6') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
```
> **Nota:** Caso a verifica√ß√£o falhe, o instalador ser√° removido automaticamente e ser√° necess√°rio executar o comando de c√≥pia novamente.

#### Executar o script de instala√ß√£o do Composer:
```shell
php composer-setup.php
```

#### Utilizar as funcionalidades do Composer:
```shell
php composer.phar
```

#### Remover o instalador do Composer:
```shell
php -r "unlink('composer-setup.php');"
```

Com esses passos, o Composer estar√° baixado e pronto para ser instalado.

### Instalando o composer:
- Crie um arquivo "composer.json" no diret√≥rio raiz do projeto. Este arquivo armazenar√° as informa√ß√µes que ser√£o base para a instala√ß√£o do composer.
Algo assim deve ser criado:
```JSON
{
    "name": "meu-vendor/nome dele",
    "require": {
        "php": ">= 7.0"
    },
    "authors": [ //pode ter mais de um objeto
        {//come√ßo do objeto
            "name": "Seu Nome",
            "email": "seu@email.com"
        }
    ],
    "autoload": {
        "psr-4": { //Namespaces
            "App\\": "App/",
            "MF\\": "vendor/MF/"
        }
    }
}
//ressaltando, suas necessidades s√£o os parametros para este arquivo. Este √© s√≥ um exemplo simples
```

### Boas pr√°ticas
- Agora que voc√™ sabe como criar e configurar o composer, n√£o √© necess√°rio subir a pasta vendor para o github j√° que esta pode ser facilmente recriada. Estou subindo apenas com fins de exemplifica√ß√£o mas, por ser muito grande, pode tornar seu reposit√≥rio lento em aplica√ß√µes maiores.

## Route
- N√£o est√° diretamente ligado ao padr√£o MVC, ele funciona como uma camada adicional da aplica√ß√£o que funciona como um interm√©dio entre a requisi√ß√£o HTTP e a l√≥gica da aplica√ß√£o (controllers). Embora n√£o fa√ßa parte dos principais componentes do padr√£o MVC, √© crucial para a opera√ß√£o em aplica√ß√µes web, direcionando corretamente as requisi√ß√µes.
- As rotas s√£o parte da infraestrutura que suporta a arquitetura MVC. Garantindo que a l√≥gica de roteamento esteja separada da l√≥gica de controle, da l√≥gica de neg√≥cios (models) e da l√≥gica de apresenta√ß√£o (views).
- Na grande parte das arquiteturas MVC modernas, o ponto de entrada da aplica√ß√£o web √© um script localizado no diret√≥rio ```public```, normalmente chamado de ```index.php```, sendo respons√°vel por:
- Receber as requisi√ß√µes HTTP do cliente, que s√£o direcionadas para este script atrav√©s da configura√ß√£o do servidor web (como ````.htaccess``` no Apache).
- Iniciar o autoload do Composer, carregando autom√°ticamente todas as classes necess√°rias, configuradas no ```composer.json```, tornando mais simples o gerenciamento de depend√™ncias e carregamento de classes.
- Por fim, define e manipula as rotas, direcionando as requisi√ß√µes para o controlador correto com o m√©todo apropriado com base na URL.